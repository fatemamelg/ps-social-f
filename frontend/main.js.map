{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/api.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth.service.ts","webpack:///./src/app/authInterceptor.service.ts","webpack:///./src/app/login.component.ts","webpack:///./src/app/messages.component.ts","webpack:///./src/app/post.component.ts","webpack:///./src/app/profile.component.ts","webpack:///./src/app/register.component.html","webpack:///./src/app/register.component.ts","webpack:///./src/app/users.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { environment } from '../environments/environment'\n\n@Injectable()\n\nexport class ApiService {\n\n    messages = []\n    users = []\n    path = environment.path\n    constructor(public http: HttpClient) {}\n\n    getMessages(userId){\n        this.http.get<any>(this.path + '/posts/' + userId).subscribe(res => {\n            this.messages = res\n        })\n    }\n\n    postMessage(message){\n        this.http.post(this.path + '/posts', message).subscribe(res => {\n        })\n    }\n\n    getUsers(){\n        this.http.get<any>(this.path + '/users').subscribe(res => {\n            this.users = res\n        })\n    }\n\n    getProfile(id){\n        return this.http.get(this.path + '/profile/' + id)\n    }\n\n\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { AuthService } from './auth.service'\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <mat-toolbar>\n      <button mat-button routerLink=\"/\">PSSocial</button>\n      <button mat-button routerLink=\"/users\">Users</button>\n      <span style=\"flex: 1 1 auto\"></span>\n      <button mat-button *ngIf=\"!authService.isAuthenticated\" routerLink=\"/register\">Register</button>\n      <button mat-button *ngIf=\"!authService.isAuthenticated\" routerLink=\"/login\">Login</button>\n      <button mat-button *ngIf=\"authService.isAuthenticated\" (click)=\"authService.logout()\">Logout</button>\n    </mat-toolbar>\n    <router-outlet></router-outlet>\n  `,\n})\nexport class AppComponent {\n\n  constructor(public authService: AuthService){}\n\n  title = 'my app';\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport {MatButtonModule, MatCardModule, MatToolbarModule, MatInputModule, MatListModule} from '@angular/material'\nimport { FormsModule } from '@angular/forms'\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http' \n\nimport { AppRoutingModule } from './app-routing.module'\nimport { AppComponent } from './app.component'\nimport { ApiService } from './api.service'\nimport { AuthService } from './auth.service'\nimport { MessagesComponent } from './messages.component'\nimport { RegisterComponent } from './register.component'\nimport { LoginComponent } from './login.component'\nimport { UsersComponent } from './users.component'\nimport { ProfileComponent } from './profile.component'\nimport { PostComponent } from './post.component'\nimport { AuthInterceptorService } from './authInterceptor.service'\n\n\nconst routes = [\n  { path: '', component: PostComponent},\n  { path: 'register', component: RegisterComponent},\n  { path: 'login', component: LoginComponent},\n  { path: 'users', component: UsersComponent},\n  { path: 'profile/:id', component: ProfileComponent}\n]\n\n@NgModule({\n  declarations: [\n    AppComponent, \n    MessagesComponent,\n    RegisterComponent, \n    LoginComponent, \n    UsersComponent, \n    ProfileComponent,\n    PostComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule, FormsModule,\n    MatButtonModule, MatCardModule, MatToolbarModule, MatInputModule, MatListModule,\n    RouterModule.forRoot(routes),\n    BrowserAnimationsModule,\n  ],\n  providers: [ApiService, AuthService, { \n    provide: HTTP_INTERCEPTORS, \n    useClass: AuthInterceptorService,\n    multi: true\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { environment } from '../environments/environment'\n\n@Injectable()\nexport class AuthService {\n    messages = []\n    path =  environment.path + '/auth'\n\n    TOKEN_KEY = 'token'\n    \n    constructor(private http: HttpClient) {}\n\n    get token() {\n        return localStorage.getItem(this.TOKEN_KEY)\n    }\n\n    get isAuthenticated() {\n        return !!localStorage.getItem(this.TOKEN_KEY)\n    }\n\n    logout() {\n        localStorage.removeItem(this.TOKEN_KEY)\n    }\n\n    registerUser(registerData){\n        this.http.post<any>(this.path + '/register', registerData).subscribe(res => {\n            this.saveToken(res.token)\n        })\n    }\n\n    loginUser(loginData){\n        this.http.post<any>(this.path + '/login', loginData).subscribe(res => {\n            this.saveToken(res.token)\n        })\n    }\n\n    saveToken(token) {\n        localStorage.setItem(this.TOKEN_KEY, token)\n    }\n\n}","import { Injectable, Injector } from '@angular/core'\nimport { HttpInterceptor } from '@angular/common/http'\nimport { AuthService } from './auth.service'\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor{\n\n    constructor(public injector: Injector) {}\n\n    intercept(req, next){\n        var auth = this.injector.get(AuthService)\n        var authRequest = req.clone({\n            headers: req.headers.set('Authorization', 'token ' + auth.token)\n        })\n        return next.handle(authRequest)\n    }\n}","import { Component } from '@angular/core';\nimport { AuthService } from './auth.service'\n\n@Component({\n  selector: 'login',\n  template: `\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title><h4>Login</h4></mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <form>\n                <mat-form-field>\n                    <input [(ngModel)]=\"loginData.email\" name=\"email\" matInput placeholder=\"email\" type=\"email\">\n                </mat-form-field>\n\n                <mat-form-field>\n                    <input [(ngModel)]=\"loginData.pwd\" name=\"password\" matInput placeholder=\"password\" type=\"password\">\n                </mat-form-field>\n                <button (click)=\"post()\" mat-raised-button color=\"primary\">Login</button>\n            </form>\n        </mat-card-content>\n    </mat-card>\n  `\n})\nexport class LoginComponent {\n\n    loginData = {}\n\n    constructor(public authService: AuthService){}\n\n    post() {\n        this.authService.loginUser(this.loginData)\n    }\n}\n","import { Component } from '@angular/core';\nimport { ApiService } from './api.service'\nimport { ActivatedRoute } from '@angular/router'\n\n@Component({\n  selector: 'messages',\n  template: `\n    <div *ngFor=\"let message of apiService.messages\">\n        <mat-card>{{message.msg}}</mat-card>\n    </div>\n    `\n})\nexport class MessagesComponent {\n\n  constructor(public apiService: ApiService, public route: ActivatedRoute){}\n\n  ngOnInit(){\n    var userId = this.route.snapshot.params.id\n\n    this.apiService.getMessages(userId)\n  }\n}\n","import { Component } from '@angular/core';\nimport { ApiService } from './api.service'\n\n@Component({\n  selector: 'post',\n  template: `\n  <mat-card>\n  <mat-card-header>\n      <mat-card-title><h4>New Post</h4></mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n      <form>\n          <mat-form-field style=\"width: 100%\">\n              <textarea [(ngModel)]=\"postMsg\" name=\"description\" matInput placeholder=\"Post Message\"></textarea>\n          </mat-form-field>\n          <br />\n          <button (click)=\"post()\" mat-raised-button color=\"primary\">Post</button>\n      </form>\n  </mat-card-content>\n</mat-card>\n    `\n})\nexport class PostComponent {\n\n  constructor(public apiService: ApiService){}\n\n  postMsg = ''\n  post() {\n      this.apiService.postMessage({msg: this.postMsg})\n  }\n\n}\n","import { Component } from '@angular/core';\nimport { ApiService } from './api.service'\nimport { ActivatedRoute } from '@angular/router'\nimport { Profile } from 'selenium-webdriver/firefox';\n\n@Component({\n  selector: 'login',\n  template: `\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title><h4>Profile</h4></mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n        <mat-list role=\"list\">\n            <mat-list-item role=\"listitem\">Name: {{profile?.name}}</mat-list-item>\n            <mat-list-item role=\"listitem\">Email: {{profile?.email}}</mat-list-item>\n            <mat-list-item role=\"listitem\">Description: {{profile?.description}}</mat-list-item>\n        </mat-list>\n        </mat-card-content>\n    </mat-card>\n\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title><h4>Posts</h4></mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <messages></messages>\n        </mat-card-content>\n    </mat-card>\n\n  `\n})\nexport class ProfileComponent {\n\n    constructor(public apiService: ApiService, public route: ActivatedRoute){ }\n\n    profile\n\n    ngOnInit() {\n        var id = this.route.snapshot.params.id\n        this.apiService.getProfile(id).subscribe(data => this.profile = data)\n    }\n\n}\n","module.exports = \"<mat-card>\\n    <mat-card-header>\\n        <mat-card-title><h4>Register New User</h4></mat-card-title>\\n    </mat-card-header>\\n    <mat-card-content>\\n        <form>\\n            <mat-form-field>\\n                <input [(ngModel)]=\\\"registerData.email\\\" name=\\\"email\\\" matInput placeholder=\\\"email\\\" type=\\\"email\\\">\\n            </mat-form-field>\\n\\n            <mat-form-field>\\n                <input [(ngModel)]=\\\"registerData.pwd\\\" name=\\\"password\\\" matInput placeholder=\\\"password\\\" type=\\\"password\\\">\\n            </mat-form-field>\\n            <br />\\n            <mat-form-field>\\n                <input [(ngModel)]=\\\"registerData.name\\\" name=\\\"name\\\" matInput placeholder=\\\"name\\\">\\n            </mat-form-field>\\n            <br />\\n            <br />\\n            <mat-form-field style=\\\"width: 100%\\\">\\n                <textarea [(ngModel)]=\\\"registerData.description\\\" name=\\\"description\\\" matInput placeholder=\\\"description\\\"></textarea>\\n            </mat-form-field>\\n            <br />\\n            <button (click)=\\\"post()\\\" mat-raised-button color=\\\"primary\\\">Register</button>\\n        </form>\\n    </mat-card-content>\\n</mat-card>\"","import { Component } from '@angular/core';\nimport { AuthService } from './auth.service'\n\n@Component({\n  selector: 'register',\n  templateUrl: 'register.component.html'\n})\nexport class RegisterComponent {\n\n    registerData = {}\n\n    constructor(public authService: AuthService){}\n\n    post() {\n        console.log(this.registerData)\n        this.authService.registerUser(this.registerData)\n    }\n}\n","import { Component } from '@angular/core';\nimport { ApiService } from './api.service'\n\n@Component({\n  selector: 'users',\n  template: `\n    <div *ngFor=\"let user of apiService.users\">\n        <mat-card [routerLink]=\"['/profile', user._id]\" style=\"cursor: pointer\">{{user.name}}</mat-card>\n    </div>\n    `\n})\nexport class UsersComponent {\n\n  constructor(public apiService: ApiService){ }\n\n  ngOnInit(){\n    this.apiService.getUsers();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  path: 'http://localhost:3000'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}